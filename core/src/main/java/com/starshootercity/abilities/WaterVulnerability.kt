package com.starshootercity.abilities

import com.destroystokyo.paper.event.server.ServerTickEndEvent
import com.starshootercity.OriginSwapper.LineData.Companion.makeLineFor
import com.starshootercity.OriginSwapper.LineData.LineComponent
import com.starshootercity.OriginsReborn
import com.starshootercity.OriginsReborn.Companion.NMSInvoker
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import net.kyori.adventure.key.Key
import org.bukkit.Bukkit
import org.bukkit.entity.Player
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.endera.enderalib.utils.async.ioDispatcher

open class WaterVulnerability : VisibleAbility, Listener {
    override fun getKey(): Key {
        return Key.key("origins:water_vulnerability")
    }

    override fun getDescription(): MutableList<LineComponent?> {
        return makeLineFor(
            "You receive damage over time while in contact with water.",
            LineComponent.LineType.DESCRIPTION
        )
    }

    override fun getTitle(): MutableList<LineComponent?> {
        return makeLineFor("Hydrophobia", LineComponent.LineType.TITLE)
    }


    @EventHandler
    fun onServerTickEnd(event: ServerTickEndEvent?) {
        val currentTick = Bukkit.getCurrentTick()
        CoroutineScope(ioDispatcher).launch {
            for (player in Bukkit.getOnlinePlayers().toList()) {
                runForAbilityAsync(player) { player ->
                    val lastTick = lastWaterDamagedMap.getOrDefault(player, currentTick - 20)!!
                    if (currentTick - lastTick < 20) return@runForAbilityAsync

                    withContext(OriginsReborn.bukkitDispatcher) {
                        if (player.isInWaterOrRainOrBubbleColumn || NMSInvoker.wasTouchingWater(player)) {
                            NMSInvoker.dealFreezeDamage(player, 1)
                            lastWaterDamagedMap[player] = currentTick
                        }
                    }
                }
            }
        }
    }


    private val lastWaterDamagedMap: MutableMap<Player?, Int?> = HashMap<Player?, Int?>()
}
